//
// Generated file, do not edit! Created by nedtool 4.6 from src/stack/phy/packet/LteAirFrame.msg.
//

#ifndef _LTEAIRFRAME_M_H_
#define _LTEAIRFRAME_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "AirFrame_m.h"
// }}

/**
 * Class generated from <tt>src/stack/phy/packet/LteAirFrame.msg:22</tt> by nedtool.
 * <pre>
 * //
 * // This is LteAirFrame.
 * //
 * packet LteAirFrame extends AirFrame
 * {
 *     @customize(true);
 *     //TODO: add txmode for MIMO operations
 * }
 * </pre>
 *
 * LteAirFrame_Base is only useful if it gets subclassed, and LteAirFrame is derived from it.
 * The minimum code to be written for LteAirFrame is the following:
 *
 * <pre>
 * class LteAirFrame : public LteAirFrame_Base
 * {
 *   private:
 *     void copy(const LteAirFrame& other) { ... }

 *   public:
 *     LteAirFrame(const char *name=NULL, int kind=0) : LteAirFrame_Base(name,kind) {}
 *     LteAirFrame(const LteAirFrame& other) : LteAirFrame_Base(other) {copy(other);}
 *     LteAirFrame& operator=(const LteAirFrame& other) {if (this==&other) return *this; LteAirFrame_Base::operator=(other); copy(other); return *this;}
 *     virtual LteAirFrame *dup() const {return new LteAirFrame(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from LteAirFrame_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(LteAirFrame);
 * </pre>
 */
class LteAirFrame_Base : public ::AirFrame
{
  protected:

  private:
    void copy(const LteAirFrame_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LteAirFrame_Base&);
    // make constructors protected to avoid instantiation
    LteAirFrame_Base(const char *name=NULL, int kind=0);
    LteAirFrame_Base(const LteAirFrame_Base& other);
    // make assignment operator protected to force the user override it
    LteAirFrame_Base& operator=(const LteAirFrame_Base& other);

  public:
    virtual ~LteAirFrame_Base();
    virtual LteAirFrame_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class LteAirFrame");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};


#endif // ifndef _LTEAIRFRAME_M_H_

