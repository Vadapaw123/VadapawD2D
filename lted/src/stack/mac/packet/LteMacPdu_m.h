//
// Generated file, do not edit! Created by nedtool 4.6 from src/stack/mac/packet/LteMacPdu.msg.
//

#ifndef _LTEMACPDU_M_H_
#define _LTEMACPDU_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>src/stack/mac/packet/LteMacPdu.msg:16</tt> by nedtool.
 * <pre>
 * //
 * // This is the MAC message flowing through LTE stack.
 * //
 * packet LteMacPdu
 * {
 *     @customize(true);
 *     abstract cPacket sdu[];
 *     unsigned int headerLength = 0;
 * 
 *     //#
 *     //# Follows a list of elements only present in
 *     //# the customized class (see LteMacPdu.h):
 *     //#
 *     //# MacSduList sduList;
 *     //# MacControlElementsList ceList;
 *     //#
 * }
 * </pre>
 *
 * LteMacPdu_Base is only useful if it gets subclassed, and LteMacPdu is derived from it.
 * The minimum code to be written for LteMacPdu is the following:
 *
 * <pre>
 * class LteMacPdu : public LteMacPdu_Base
 * {
 *   private:
 *     void copy(const LteMacPdu& other) { ... }

 *   public:
 *     LteMacPdu(const char *name=NULL, int kind=0) : LteMacPdu_Base(name,kind) {}
 *     LteMacPdu(const LteMacPdu& other) : LteMacPdu_Base(other) {copy(other);}
 *     LteMacPdu& operator=(const LteMacPdu& other) {if (this==&other) return *this; LteMacPdu_Base::operator=(other); copy(other); return *this;}
 *     virtual LteMacPdu *dup() const {return new LteMacPdu(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from LteMacPdu_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(LteMacPdu);
 * </pre>
 */
class LteMacPdu_Base : public ::cPacket
{
  protected:
    unsigned int headerLength_var;

  private:
    void copy(const LteMacPdu_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LteMacPdu_Base&);
    // make constructors protected to avoid instantiation
    LteMacPdu_Base(const char *name=NULL, int kind=0);
    LteMacPdu_Base(const LteMacPdu_Base& other);
    // make assignment operator protected to force the user override it
    LteMacPdu_Base& operator=(const LteMacPdu_Base& other);

  public:
    virtual ~LteMacPdu_Base();
    virtual LteMacPdu_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class LteMacPdu");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setSduArraySize(unsigned int size) = 0;
    virtual unsigned int getSduArraySize() const = 0;
    virtual cPacket& getSdu(unsigned int k) = 0;
    virtual const cPacket& getSdu(unsigned int k) const {return const_cast<LteMacPdu_Base*>(this)->getSdu(k);}
    virtual void setSdu(unsigned int k, const cPacket& sdu) = 0;
    virtual unsigned int getHeaderLength() const;
    virtual void setHeaderLength(unsigned int headerLength);
};

/**
 * Class generated from <tt>src/stack/mac/packet/LteMacPdu.msg:34</tt> by nedtool.
 * <pre>
 * //
 * // Mac Control Element
 * //
 * class MacControlElement
 * {
 *     double timestamp;
 * }
 * </pre>
 */
class MacControlElement : public ::cObject
{
  protected:
    double timestamp_var;

  private:
    void copy(const MacControlElement& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MacControlElement&);

  public:
    MacControlElement();
    MacControlElement(const MacControlElement& other);
    virtual ~MacControlElement();
    MacControlElement& operator=(const MacControlElement& other);
    virtual MacControlElement *dup() const {return new MacControlElement(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);
};

inline void doPacking(cCommBuffer *b, MacControlElement& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MacControlElement& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/stack/mac/packet/LteMacPdu.msg:42</tt> by nedtool.
 * <pre>
 * //
 * // Mac Buffer Status Report
 * //
 * class MacBsr extends MacControlElement
 * {
 *     int size;
 * }
 * </pre>
 */
class MacBsr : public ::MacControlElement
{
  protected:
    int size_var;

  private:
    void copy(const MacBsr& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MacBsr&);

  public:
    MacBsr();
    MacBsr(const MacBsr& other);
    virtual ~MacBsr();
    MacBsr& operator=(const MacBsr& other);
    virtual MacBsr *dup() const {return new MacBsr(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSize() const;
    virtual void setSize(int size);
};

inline void doPacking(cCommBuffer *b, MacBsr& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MacBsr& obj) {obj.parsimUnpack(b);}


#endif // ifndef _LTEMACPDU_M_H_

