//
// Generated file, do not edit! Created by nedtool 4.6 from src/common/LteControlInfo.msg.
//

#ifndef _LTECONTROLINFO_M_H_
#define _LTECONTROLINFO_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "LteCommon.h"
    
// }}

/**
 * Class generated from <tt>src/common/LteControlInfo.msg:48</tt> by nedtool.
 * <pre>
 * class UserControlInfo
 * {
 *     uint16 sourceId;
 *     uint16 destId;
 *     unsigned short direction @enum(Direction);
 * 
 *     //# Traffic control application 
 * 
 *     //unsigned short application enum(ApplicationType);
 *     unsigned short traffic @enum(LteTrafficClass);
 *     //## connteciton Information 
 * 
 *     uint16 lcid;
 * 
 * 
 *     @customize(true);
 * 
 *     //# H-ARQ Control Information
 * 
 *     unsigned char acid;                // H-ARQ process identifier
 *     unsigned char cw;                // H-ARQ codeword identifier
 *     unsigned char txNumber = 0;            // number of (re)transmissions for the same pdu (1, 2, 3, 4)
 *     bool ndi = true;                    // new data indicator (new data overwrites a process content if present)
 * 
 *     //# PHY Control Informations
 * 
 *     bool isCorruptible;                                // Frame is corruptible
 *     bool isBroadcast = false;                        // Broadcast packet
 *     bool deciderResult;                                // Decider result
 *     double blerTh;                                    // Calculated BLER threshold for this transmission
 *     double blerValue;                                // Extracted BLER for this transmission (blerValue > blerTh ==> corrupted)
 *     unsigned short txMode @enum(TxMode);                // Traffic Type
 *     unsigned int frameType @enum(LtePhyFrameType);    // Frame Type
 *     double txPower;                                    //Transmission Power
 *     // blocks granted on all Remotes, all Bands
 *     unsigned int totalGrantedBlocks;
 * 
 *     //#
 *     //# Follows a list of elements only present in
 *     //# the customized class (see LteControlInfo.h):
 *     //#
 *     //# RemoteSet ru;                                // Remote Antenna Set
 *     //# RbMap grantedBlocks;                        // Blocks allocated per Remote, per Band.
 * }
 * </pre>
 *
 * UserControlInfo_Base is only useful if it gets subclassed, and UserControlInfo is derived from it.
 * The minimum code to be written for UserControlInfo is the following:
 *
 * <pre>
 * class UserControlInfo : public UserControlInfo_Base
 * {
 *   private:
 *     void copy(const UserControlInfo& other) { ... }

 *   public:
 *     UserControlInfo() : UserControlInfo_Base() {}
 *     UserControlInfo(const UserControlInfo& other) : UserControlInfo_Base(other) {copy(other);}
 *     UserControlInfo& operator=(const UserControlInfo& other) {if (this==&other) return *this; UserControlInfo_Base::operator=(other); copy(other); return *this;}
 *     virtual UserControlInfo *dup() const {return new UserControlInfo(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from UserControlInfo_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(UserControlInfo);
 * </pre>
 */
class UserControlInfo_Base : public ::cObject
{
  protected:
    uint16 sourceId_var;
    uint16 destId_var;
    unsigned short direction_var;
    unsigned short traffic_var;
    uint16 lcid_var;
    unsigned char acid_var;
    unsigned char cw_var;
    unsigned char txNumber_var;
    bool ndi_var;
    bool isCorruptible_var;
    bool isBroadcast_var;
    bool deciderResult_var;
    double blerTh_var;
    double blerValue_var;
    unsigned short txMode_var;
    unsigned int frameType_var;
    double txPower_var;
    unsigned int totalGrantedBlocks_var;

  private:
    void copy(const UserControlInfo_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UserControlInfo_Base&);
    // make constructors protected to avoid instantiation
    UserControlInfo_Base();
    UserControlInfo_Base(const UserControlInfo_Base& other);
    // make assignment operator protected to force the user override it
    UserControlInfo_Base& operator=(const UserControlInfo_Base& other);

  public:
    virtual ~UserControlInfo_Base();
    virtual UserControlInfo_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class UserControlInfo");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint16 getSourceId() const;
    virtual void setSourceId(uint16 sourceId);
    virtual uint16 getDestId() const;
    virtual void setDestId(uint16 destId);
    virtual unsigned short getDirection() const;
    virtual void setDirection(unsigned short direction);
    virtual unsigned short getTraffic() const;
    virtual void setTraffic(unsigned short traffic);
    virtual uint16 getLcid() const;
    virtual void setLcid(uint16 lcid);
    virtual unsigned char getAcid() const;
    virtual void setAcid(unsigned char acid);
    virtual unsigned char getCw() const;
    virtual void setCw(unsigned char cw);
    virtual unsigned char getTxNumber() const;
    virtual void setTxNumber(unsigned char txNumber);
    virtual bool getNdi() const;
    virtual void setNdi(bool ndi);
    virtual bool getIsCorruptible() const;
    virtual void setIsCorruptible(bool isCorruptible);
    virtual bool getIsBroadcast() const;
    virtual void setIsBroadcast(bool isBroadcast);
    virtual bool getDeciderResult() const;
    virtual void setDeciderResult(bool deciderResult);
    virtual double getBlerTh() const;
    virtual void setBlerTh(double blerTh);
    virtual double getBlerValue() const;
    virtual void setBlerValue(double blerValue);
    virtual unsigned short getTxMode() const;
    virtual void setTxMode(unsigned short txMode);
    virtual unsigned int getFrameType() const;
    virtual void setFrameType(unsigned int frameType);
    virtual double getTxPower() const;
    virtual void setTxPower(double txPower);
    virtual unsigned int getTotalGrantedBlocks() const;
    virtual void setTotalGrantedBlocks(unsigned int totalGrantedBlocks);
};


#endif // ifndef _LTECONTROLINFO_M_H_

